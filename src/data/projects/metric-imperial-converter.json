{
    "name": "Metric-Imperial Converter",
    "tagline": "A microservice project, part of Free Code Camp's curriculum",
    "for": "Practice: freeCodeCamp",
    "thumb": "/images/projects/metric-imperial-converter-thumb.jpg",
    "logo_inv": "/images/logos/freecodecamp-inverse.svg",
    "url": "//fcc-backend-metric-imperial-converter.glitch.me",
    "desc": "Project summary goes here. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc, quis gravida magna mi a libero. Fusce vulputate eleifend sapien. Vestibulum purus quam, scelerisque ut, mollis sed, nonummy id, metus.",
    "story": ["I will help prevent the client from trying to guess(sniff) the MIME type.", "I will prevent cross-site scripting (XSS) attacks.", "I can GET /api/convert with a single parameter containing an accepted number and unit and have it converted.", "I can convert 'gal' to 'L' and vice versa. (1 gal to 3.78541 L)", "I can convert 'lbs' to 'kg' and vice versa. (1 lbs to 0.453592 kg)", "I can convert 'mi' to 'km' and vice versa. (1 mi to 1.60934 km)", "If my unit of measurement is invalid, returned will be 'invalid unit'.", "If my number is invalid, returned with will 'invalid number'.", "If both are invalid, return will be 'invalid number and unit'.", "I can use fractions, decimals or both in my parameter(ie. 5, 1/2, 2.5/6), but if nothing is provided it will default to 1.", "My return will consist of the initNum, initUnit, returnNum, returnUnit, and string spelling out units in format {initNum} {initial_Units} converts to {returnNum} {return_Units} with the result rounded to 5 decimals.", "All 16 unit tests are complete and passing.", "All 5 functional tests are complete and passing."],
    "pic": "",
    "tech": ["NodeJS", "JavaScript"],
    "type": "Backend",
    "html": "<div class=\"glitch-embed-wrap\" style=\"height: 420px; width: 100%;\"><iframe allow=\"geolocation; microphone; camera; midi; encrypted-media\" src=\"https://glitch.com/embed/#!/embed/fcc-backend-metric-imperial-converter?path=README.md&previewSize=100\" alt=\"fcc-backend-metric-imperial-converter on Glitch\" style=\"height: 100%; width: 100%; border: 0;\"></iframe></div>"
}